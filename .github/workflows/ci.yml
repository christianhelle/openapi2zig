name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  ZIG_VERSION: "0.14.1"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: mlugg/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Check code formatting
        run: zig fmt --check src/
        continue-on-error: true

      - name: Check build file formatting
        run: zig fmt --check build.zig
        continue-on-error: true

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint-and-format

    strategy:
      matrix:
        optimize: [Debug, ReleaseFast, ReleaseSafe, ReleaseSmall]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Cache Zig dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/zig
            .zig-cache
          key: ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig.zon') }}
          restore-keys: |
            ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-
            ${{ runner.os }}-zig-

      - name: Verify Zig installation
        run: zig version

      - name: Build project (${{ matrix.optimize }})
        run: zig build -Doptimize=${{ matrix.optimize }}

      - name: Run tests (${{ matrix.optimize }})
        run: zig build test -Doptimize=${{ matrix.optimize }}

      - name: Install test artifacts
        run: zig build install_test -Doptimize=${{ matrix.optimize }}
        if: matrix.optimize == 'Debug'

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: matrix.optimize == 'Debug'
        with:
          name: test-binaries
          path: zig-out/tests/
          retention-days: 7

  cross-compile:
    name: Cross-compile Check
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        target: [x86_64-windows, x86_64-macos, aarch64-linux]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Cache Zig dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/zig
            .zig-cache
          key: ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig.zon') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig.zon') }}-
            ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-
            ${{ runner.os }}-zig-

      - name: Cross-compile for ${{ matrix.target }}
        run: zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseFast

      - name: Upload cross-compiled artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi2zig-${{ matrix.target }}
          path: zig-out/bin/
          retention-days: 7

  # Placeholder for future deployment stage
  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   needs: [build-and-test, cross-compile]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   steps:
  #   - name: Deploy to staging
  #     run: echo "Deploy stage placeholder"

