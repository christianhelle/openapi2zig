name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string

env:
  ZIG_VERSION: "0.15.1"

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-linux
            binary_name: openapi2zig
            archive_name: openapi2zig-linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-windows
            binary_name: openapi2zig.exe
            archive_name: openapi2zig-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-macos
            binary_name: openapi2zig
            archive_name: openapi2zig-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-macos
            binary_name: openapi2zig
            archive_name: openapi2zig-macos-aarch64.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Cache Zig
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/zig
            zig-cache
          key: ${{ runner.os }}-zig-release-${{ hashFiles('build.zig', 'build.zig.zon') }}
          restore-keys: |
            ${{ runner.os }}-zig-release-

      - name: Build release binary
        run: |
          zig build -Doptimize=ReleaseSmall -Dtarget=${{ matrix.target }}

      - name: Create archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          cp zig-out/bin/${{ matrix.binary_name }} release/
          cp README.md release/
          cp LICENSE release/
          cd release
          tar -czf ../${{ matrix.archive_name }} *

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          copy zig-out\bin\${{ matrix.binary_name }} release\
          copy README.md release\
          copy LICENSE release\
          Compress-Archive -Path release\* -DestinationPath ${{ matrix.archive_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            cat CHANGELOG.md | head -n 50 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Release ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ## Download
            Download the appropriate binary for your platform below.

            ## Installation
            1. Download the archive for your platform
            2. Extract the binary
            3. Add to your PATH or run directly

            ## Checksums
            See the attached checksums file for verification.
          files: |
            artifacts/**/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  publish-container:
    name: Publish Container
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: openapi2zig-linux-x86_64.tar.gz
          path: artifacts

      - name: Extract binary
        run: |
          cd artifacts
          tar -xzf openapi2zig-linux-x86_64.tar.gz
          chmod +x openapi2zig

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            ${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
